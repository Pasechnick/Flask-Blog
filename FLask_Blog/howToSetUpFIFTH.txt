in this stage we want to split the files so the app will consist of packages 

so we create a models file where we putting the user and post database models

and by moving those models we do not need to forget that we also need to import their libraries also, like datetime. 
Then we also need to import User and Post models to the main app file, by writing import on the top of the document the import sentence "from models import User, Post"
we importing those db models from newly created file back. 

The problem that occurs is called "circular import" - so the User and Post models can not be imported and the system crushes.

When we run the app from our terminal, the terminal imports the User and Post from the model module and when the python imports something from a module it still runs the entire imported module and the background, 
so then there is a problem -> python goes to the "models" script and then tries to perform it's imports: "from flaskblog import db", 
at this point the python does not know what flaskblog is cuz after we run the flaskblog from the terminal we running it directly with python 
and python names the name of the running script "__main__" and not "flaskblog" so when it gets to the line "from flaskblog import db" 
the python does not know what flaskblog is, it only knows "__main__". 
So we can change "from flaskblog import db" to "from __main__ import db", 
but then there is one more error cuz it could not find "db" variable cuz this variable is unreachable for import and it can not import "db" -> so we can move the "from flaskblog import db" under the "db" initialization then the app will work
But if for some case the database (site.db) was deleted or not created inside the python it will crush gain so we need to find other solution 

So there is a good, not ugly solution: to set up our code in the way where we are not running flaskblog directly, so there is no need to import "__main__" 
we turn the app into the package - it will make all this imports more simple and allows us to separate things out better then now.

To tell python that our app is a package we need to create a folder (flaskblog) within our project with "__init__" file name inside. Then we move all our files inside this folder.


